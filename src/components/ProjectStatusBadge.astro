---
interface Props {
  status: "live" | "in-development" | "completed"
  link?: string | undefined
}
const { status, link } = Astro.props

const getStatusColor = (status: Props["status"]) => {
  switch (status) {
    case "live":
      return "bg-green-500/20 text-green-300 border-green-700/40 group-hover:bg-green-500/10"
    case "in-development":
      return "bg-blue-500/20 text-blue-300 border-blue-700/40 group-hover:bg-blue-500/10"
    case "completed":
      return "bg-slate-500/20 text-slate-300 border-slate-700/40 group-hover:bg-slate-500/10"
  }
}

const badgeClass = `inline-flex items-center gap-1 rounded-full px-2 py-1 text-xs border ${getStatusColor(status)} transition-colors duration-200 relative`

const arrowCircleClass = `ml-1 flex items-center justify-center rounded-full ${getStatusColor(status)} size-5 p-0.5 transition-colors duration-200 bg-transparent absolute right-[0.15rem]`
---

{
  link ? (
    <a
      href={link}
      target="_blank"
      rel="noopener noreferrer"
      class={badgeClass + " group cursor-pointer pr-7 hover:opacity-90"}
      aria-label="See project online"
    >
      {status}
      <span class={arrowCircleClass} aria-hidden="true">
        <svg
          width="16"
          height="16"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle cx="10" cy="10" r="9" fill="none" />
          <path
            d="M7 10h6m0 0l-2-2m2 2l-2 2"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </span>
    </a>
  ) : (
    <span class={badgeClass}>{status}</span>
  )
}
